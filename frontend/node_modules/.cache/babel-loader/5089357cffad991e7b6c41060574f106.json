{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\ddi\\\\frontend\\\\src\\\\views\\\\Components\\\\HostRecords.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport axios from 'axios';\nimport { useRecoilState } from 'recoil';\nimport { hostNameTextState } from '../../atoms/dns/hostNameText';\nimport HostRecordItem from './HostRecordItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HostRecords = () => {\n  _s();\n\n  const [hostName, setHostName] = useRecoilState(hostNameTextState);\n  const [quantity, setQuantity] = useState(1);\n  const [responseData, setResponseData] = React.useState('');\n  const [dnsData, setDnsData] = useState([]);\n  const {\n    register,\n    handleSubmit\n  } = useForm();\n  useEffect(() => {\n    getDNS();\n  }, []);\n\n  const onFormSubmit = data => {\n    const ipAdd = [];\n    delete data.numberOfIps;\n    Object.keys(data).length > 0 && Object.keys(data).forEach(val => {\n      ipAdd.push({\n        ipv4addr: data[val]\n      });\n    });\n    const datamain = {\n      name: hostName,\n      ipv4addrs: ipAdd\n    };\n    axios.post('http://localhost:9000/infoblox/addHostRecord', datamain).then(response => {\n      setResponseData(response.data);\n      getDNS();\n    }).catch(err => {\n      console.error(err);\n    });\n  };\n\n  const getDNS = () => {\n    axios.get('http://localhost:9000/infoblox/getHostRecords', {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(resp => {\n      const {\n        data\n      } = resp;\n      setDnsData(data);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  const fieldRows = val => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: 'd-block mb-2 font-weight-bold',\n        children: [\"IP \", val, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        name: `ip_${val}`,\n        ref: register({\n          required: true\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderTxtFields = () => {\n    const val = quantity;\n    let rows = [];\n\n    for (let i = 1; i <= val; i++) {\n      rows.push(fieldRows(i));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: rows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 12\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"m-bottom\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onFormSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        children: \"Hostname\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row d-flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \" col-md-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'form-group',\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: 'd-block mb-2 font-weight-bold',\n              children: \"Hostname\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control\",\n              name: \"hostname\",\n              onChange: e => setHostName(e.target.value),\n              value: hostName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \" col-md-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'form-group',\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"exampleFormControlSelect2\",\n              className: 'd-block mb-2 font-weight-bold',\n              children: \"Number of IPs\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"custom-select\",\n              id: \"exampleFormControlSelect2\",\n              name: \"numberOfIps\",\n              onChange: e => setQuantity(e.target.value),\n              ref: register({\n                required: true\n              }),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"1\",\n                children: \"1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"2\",\n                children: \"2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"3\",\n                children: \"3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"4\",\n                children: \"4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: 'form-group',\n            children: renderTxtFields()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), responseData.Error !== undefined ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      role: \"alert\",\n      children: responseData.Error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this) : responseData.result !== undefined ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-success\",\n      role: \"alert\",\n      children: \"Record Added\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\xA0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(HostRecordItem, {\n        dnsData: dnsData,\n        register: register,\n        handleSubmit: handleSubmit,\n        getDns: getDNS\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HostRecords, \"jW9yK+1u8kwhI7tTI5eI1wndjH4=\", false, function () {\n  return [useRecoilState, useForm];\n});\n\n_c = HostRecords;\nexport default HostRecords;\n\nvar _c;\n\n$RefreshReg$(_c, \"HostRecords\");","map":{"version":3,"sources":["E:/projects/ddi/frontend/src/views/Components/HostRecords.js"],"names":["React","useEffect","useState","useForm","axios","useRecoilState","hostNameTextState","HostRecordItem","HostRecords","hostName","setHostName","quantity","setQuantity","responseData","setResponseData","dnsData","setDnsData","register","handleSubmit","getDNS","onFormSubmit","data","ipAdd","numberOfIps","Object","keys","length","forEach","val","push","ipv4addr","datamain","name","ipv4addrs","post","then","response","catch","err","console","error","get","headers","resp","log","fieldRows","required","renderTxtFields","rows","i","e","target","value","Error","undefined","result"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport axios from 'axios';\r\nimport { useRecoilState } from 'recoil';\r\n\r\nimport { hostNameTextState } from '../../atoms/dns/hostNameText';\r\nimport HostRecordItem from './HostRecordItem';\r\n\r\nconst HostRecords = () => {\r\n  const [hostName, setHostName] = useRecoilState(hostNameTextState);\r\n  const [quantity, setQuantity] = useState(1);\r\n  const [responseData, setResponseData] = React.useState('');\r\n  const [dnsData, setDnsData] = useState([]);\r\n\r\n  const { register, handleSubmit } = useForm();\r\n\r\n  useEffect(() => {\r\n    getDNS();\r\n  }, []);\r\n\r\n  const onFormSubmit = (data) => {\r\n    const ipAdd = [];\r\n    delete data.numberOfIps;\r\n\r\n    Object.keys(data).length > 0 &&\r\n      Object.keys(data).forEach((val) => {\r\n        ipAdd.push({\r\n          ipv4addr: data[val],\r\n        });\r\n      });\r\n    const datamain = {\r\n      name: hostName,\r\n      ipv4addrs: ipAdd,\r\n    };\r\n\r\n    axios\r\n      .post('http://localhost:9000/infoblox/addHostRecord', datamain)\r\n      .then((response) => {\r\n        setResponseData(response.data);\r\n        getDNS();\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  };\r\n\r\n  const getDNS = () => {\r\n    axios\r\n      .get('http://localhost:9000/infoblox/getHostRecords', {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      })\r\n      .then((resp) => {\r\n        const { data } = resp;\r\n        setDnsData(data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const fieldRows = (val) => {\r\n    return (\r\n      <div className='form-group'>\r\n        <label className={'d-block mb-2 font-weight-bold'}>IP {val}:</label>\r\n        <input\r\n          type='text'\r\n          className='form-control'\r\n          name={`ip_${val}`}\r\n          ref={register({ required: true })}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderTxtFields = () => {\r\n    const val = quantity;\r\n    let rows = [];\r\n    for (let i = 1; i <= val; i++) {\r\n      rows.push(fieldRows(i));\r\n    }\r\n    return <div>{rows}</div>;\r\n  };\r\n\r\n  return (\r\n    <div className='m-bottom'>\r\n      <form onSubmit={handleSubmit(onFormSubmit)}>\r\n        <h6>Hostname</h6>\r\n        <div className='row d-flex'>\r\n          <div className=' col-md-4'>\r\n            <div className={'form-group'}>\r\n              <label className={'d-block mb-2 font-weight-bold'}>\r\n                Hostname\r\n              </label>\r\n              <input\r\n                type='text'\r\n                className='form-control'\r\n                name='hostname'\r\n                onChange={(e) => setHostName(e.target.value)}\r\n                value={hostName}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=' col-md-4'>\r\n            <div className={'form-group'}>\r\n              <label\r\n                htmlFor='exampleFormControlSelect2'\r\n                className={'d-block mb-2 font-weight-bold'}\r\n              >\r\n                Number of IPs\r\n              </label>\r\n              <select\r\n                className='custom-select'\r\n                id='exampleFormControlSelect2'\r\n                name='numberOfIps'\r\n                onChange={(e) => setQuantity(e.target.value)}\r\n                ref={register({ required: true })}\r\n              >\r\n                <option value='1'>1</option>\r\n                <option value='2'>2</option>\r\n                <option value='3'>3</option>\r\n                <option value='4'>4</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className='col-md-4'>\r\n            <div className={'form-group'}>{renderTxtFields()}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <button type='submit' className='btn btn-primary'>\r\n          Submit\r\n        </button>\r\n      </form>\r\n\r\n      {responseData.Error !== undefined ? (\r\n        <div className='alert alert-danger' role='alert'>\r\n          {responseData.Error}\r\n        </div>\r\n      ) : responseData.result !== undefined ? (\r\n        <div className='alert alert-success' role='alert'>\r\n          Record Added\r\n        </div>\r\n      ) : (\r\n        <div>&nbsp;</div>\r\n      )}\r\n      <div>\r\n        <HostRecordItem\r\n          dnsData={dnsData}\r\n          register={register}\r\n          handleSubmit={handleSubmit}\r\n          getDns={getDNS}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HostRecords;\r\n"]},"metadata":{},"sourceType":"module"}