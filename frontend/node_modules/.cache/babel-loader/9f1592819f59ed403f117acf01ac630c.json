{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCodeVerifier = exports.generateCodeChallenge = exports.sha256 = exports.base64URLEncode = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n} // Helper functions for PKCE (Proof Key of Code Exchange) Extension for OAuth2\n// see https://tools.ietf.org/html/rfc7636#section-4\n\n\nvar base64URLEncode = function base64URLEncode(str) {\n  return str.toString(\"base64\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n};\n\nexports.base64URLEncode = base64URLEncode;\n\nvar sha256 = function sha256(buffer) {\n  return _crypto[\"default\"].createHash(\"sha256\").update(buffer).digest();\n};\n\nexports.sha256 = sha256;\n\nvar generateCodeChallenge = function generateCodeChallenge() {\n  // generate a code verifier for PKCE extension of Auth Code Flow\n  // see https://auth0.com/docs/api-auth/tutorials/authorization-code-grant-pkce\n  var code_verifier = base64URLEncode(_crypto[\"default\"].randomBytes(32)); // store the code_verifier as we'll need it later on when exchanging the auth code for a token\n\n  localStorage.setItem(\"code_verifier\", code_verifier); // generate code challenge to be sent with authorization request\n\n  return base64URLEncode(sha256(code_verifier));\n};\n\nexports.generateCodeChallenge = generateCodeChallenge;\n\nvar getCodeVerifier = function getCodeVerifier() {\n  // obtain the stored code verifier (stored by generateCodeChallenge)\n  var code_verifier = localStorage.getItem(\"code_verifier\");\n\n  if (code_verifier === null) {\n    throw new Error(\"No Code Verifier found\");\n  }\n\n  return code_verifier;\n};\n\nexports.getCodeVerifier = getCodeVerifier;","map":{"version":3,"sources":["/Users/shama025/Desktop/front-end/node_modules/react-oauth2-auth-code-flow/dist/pkce.js"],"names":["Object","defineProperty","exports","value","getCodeVerifier","generateCodeChallenge","sha256","base64URLEncode","_crypto","_interopRequireDefault","require","obj","__esModule","str","toString","replace","buffer","createHash","update","digest","code_verifier","randomBytes","localStorage","setItem","getItem","Error"],"mappings":"AAAA;;AAYAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,eAAR,GAA0BF,OAAO,CAACG,qBAAR,GAAgCH,OAAO,CAACI,MAAR,GAAiBJ,OAAO,CAACK,eAAR,GAA0B,KAAK,CAA1G;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D,C,CAEjG;AACA;;;AACA,IAAIJ,eAAe,GAAG,SAASA,eAAT,CAAyBM,GAAzB,EAA8B;AAClD,SAAOA,GAAG,CAACC,QAAJ,CAAa,QAAb,EAAuBC,OAAvB,CAA+B,KAA/B,EAAsC,GAAtC,EAA2CA,OAA3C,CAAmD,KAAnD,EAA0D,GAA1D,EAA+DA,OAA/D,CAAuE,IAAvE,EAA6E,EAA7E,CAAP;AACD,CAFD;;AAIAb,OAAO,CAACK,eAAR,GAA0BA,eAA1B;;AAEA,IAAID,MAAM,GAAG,SAASA,MAAT,CAAgBU,MAAhB,EAAwB;AACnC,SAAOR,OAAO,CAAC,SAAD,CAAP,CAAmBS,UAAnB,CAA8B,QAA9B,EAAwCC,MAAxC,CAA+CF,MAA/C,EAAuDG,MAAvD,EAAP;AACD,CAFD;;AAIAjB,OAAO,CAACI,MAAR,GAAiBA,MAAjB;;AAEA,IAAID,qBAAqB,GAAG,SAASA,qBAAT,GAAiC;AAC3D;AACA;AACA,MAAIe,aAAa,GAAGb,eAAe,CAACC,OAAO,CAAC,SAAD,CAAP,CAAmBa,WAAnB,CAA+B,EAA/B,CAAD,CAAnC,CAH2D,CAGc;;AAEzEC,EAAAA,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCH,aAAtC,EAL2D,CAKL;;AAEtD,SAAOb,eAAe,CAACD,MAAM,CAACc,aAAD,CAAP,CAAtB;AACD,CARD;;AAUAlB,OAAO,CAACG,qBAAR,GAAgCA,qBAAhC;;AAEA,IAAID,eAAe,GAAG,SAASA,eAAT,GAA2B;AAC/C;AACA,MAAIgB,aAAa,GAAGE,YAAY,CAACE,OAAb,CAAqB,eAArB,CAApB;;AAEA,MAAIJ,aAAa,KAAK,IAAtB,EAA4B;AAC1B,UAAM,IAAIK,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,SAAOL,aAAP;AACD,CATD;;AAWAlB,OAAO,CAACE,eAAR,GAA0BA,eAA1B","sourcesContent":["\"use strict\";\n\nrequire(\"core-js/modules/es.date.to-string\");\n\nrequire(\"core-js/modules/es.object.to-string\");\n\nrequire(\"core-js/modules/es.regexp.exec\");\n\nrequire(\"core-js/modules/es.regexp.to-string\");\n\nrequire(\"core-js/modules/es.string.replace\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCodeVerifier = exports.generateCodeChallenge = exports.sha256 = exports.base64URLEncode = void 0;\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// Helper functions for PKCE (Proof Key of Code Exchange) Extension for OAuth2\n// see https://tools.ietf.org/html/rfc7636#section-4\nvar base64URLEncode = function base64URLEncode(str) {\n  return str.toString(\"base64\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n};\n\nexports.base64URLEncode = base64URLEncode;\n\nvar sha256 = function sha256(buffer) {\n  return _crypto[\"default\"].createHash(\"sha256\").update(buffer).digest();\n};\n\nexports.sha256 = sha256;\n\nvar generateCodeChallenge = function generateCodeChallenge() {\n  // generate a code verifier for PKCE extension of Auth Code Flow\n  // see https://auth0.com/docs/api-auth/tutorials/authorization-code-grant-pkce\n  var code_verifier = base64URLEncode(_crypto[\"default\"].randomBytes(32)); // store the code_verifier as we'll need it later on when exchanging the auth code for a token\n\n  localStorage.setItem(\"code_verifier\", code_verifier); // generate code challenge to be sent with authorization request\n\n  return base64URLEncode(sha256(code_verifier));\n};\n\nexports.generateCodeChallenge = generateCodeChallenge;\n\nvar getCodeVerifier = function getCodeVerifier() {\n  // obtain the stored code verifier (stored by generateCodeChallenge)\n  var code_verifier = localStorage.getItem(\"code_verifier\");\n\n  if (code_verifier === null) {\n    throw new Error(\"No Code Verifier found\");\n  }\n\n  return code_verifier;\n};\n\nexports.getCodeVerifier = getCodeVerifier;"]},"metadata":{},"sourceType":"script"}