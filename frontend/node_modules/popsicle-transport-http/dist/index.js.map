{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { URL } from \"url\";\nimport { request as httpRequest, IncomingMessage } from \"http\";\nimport { request as httpsRequest, RequestOptions } from \"https\";\nimport { BaseError } from \"make-error-cause\";\nimport {\n  connect as netConnect,\n  Socket,\n  AddressInfo,\n  NetConnectOpts,\n} from \"net\";\nimport {\n  connect as tlsConnect,\n  SecureContext,\n  TLSSocket,\n  ConnectionOptions as TlsConnectOpts,\n} from \"tls\";\nimport {\n  connect as http2Connect,\n  IncomingHttpHeaders,\n  constants as h2constants,\n  ClientHttp2Session,\n} from \"http2\";\nimport { pipeline, PassThrough, Writable } from \"stream\";\nimport { lookup as dnsLookup, LookupOptions } from \"dns\";\nimport {\n  Request,\n  Response,\n  CreateBody,\n  ResponseOptions,\n  HeadersInit,\n} from \"servie/dist/node\";\nimport { useRawBody } from \"servie/dist/common\";\n\n/**\n * Add HTTP signals to servie events.\n */\ndeclare module \"servie/dist/signal\" {\n  export interface SignalEvents {\n    error: [Error];\n  }\n}\n\n/**\n * Address information from the HTTP request.\n */\nexport interface Connection {\n  localPort: number;\n  localAddress: string;\n  remotePort: number;\n  remoteAddress: string;\n  encrypted: boolean;\n}\n\n/**\n * Extend response with URL.\n */\nexport interface HttpResponseOptions extends ResponseOptions {\n  url: string;\n  connection: Connection;\n  httpVersion: string;\n}\n\n/**\n * HTTP responses implement a node.js body.\n */\nexport class HttpResponse extends Response implements HttpResponseOptions {\n  url: string;\n  httpVersion: string;\n  connection: Connection;\n\n  constructor(body: CreateBody, options: HttpResponseOptions) {\n    super(body, options);\n    this.url = options.url;\n    this.connection = options.connection;\n    this.httpVersion = options.httpVersion;\n  }\n}\n\nexport class Http2Response extends HttpResponse {\n  // TODO: Add HTTP2 features.\n}\n\n/**\n * Abstract connection manager.\n */\nexport interface ConnectionManager<T> {\n  /**\n   * Request a \"connection\" and initialize in `onReady` once available.\n   */\n  ready(\n    key: string,\n    onReady: (connection: T | null) => T | PromiseLike<T>\n  ): Promise<T>;\n  /**\n   * Claims an existing connection as \"in-use\".\n   */\n  claim(key: string, connection: T): void;\n  /**\n   * Removes a connection from \"in-use\" using the connection key and connection.\n   * Return `true` when the connection has been deleted from the manager and the\n   * connection must be destroyed.\n   */\n  release(key: string, connection: T): boolean;\n  /**\n   * Gets any connection (or `undefined` when none exist) using the connection key.\n   */\n  get(key: string): T | undefined;\n  /**\n   * Gets a free connection (or `undefined` if none are free) using the connection key.\n   */\n  free(key: string): T | undefined;\n  /**\n   * Deletes a connection from free and in-use using the connection key.\n   */\n  delete(key: string, connection: T): void;\n}\n\n/**\n * Set of connections for HTTP pooling.\n */\nexport class SocketSet<T> {\n  // Tracks number of sockets claimed before they're created.\n  creating = 0;\n  // Tracks free sockets.\n  free = new Set<T>();\n  // Tracks all available sockets.\n  sockets = new Set<T>();\n  // Tracks pending requests for a socket.\n  pending: Array<(connection: T | null) => void> = [];\n}\n\n/**\n * Manage socket reuse.\n */\nexport class SocketConnectionManager<T extends Socket | TLSSocket>\n  implements ConnectionManager<T> {\n  pools = new Map<string, SocketSet<T>>();\n\n  constructor(\n    public maxFreeConnections = 256,\n    public maxConnections = Infinity\n  ) {}\n\n  /**\n   * Creates a connection when available.\n   */\n  ready(key: string, onReady: (socket: T | null) => Promise<T>): Promise<T> {\n    const pool = this.pool(key);\n\n    // Wrap `onReady` in a temporary socket claim when socket is `null`.\n    const callback = (socket: T | null) => {\n      if (socket) return onReady(socket);\n      pool.creating++;\n      return onReady(null).finally(() => pool.creating--);\n    };\n\n    // Add to \"pending\" queue when over max connections.\n    if (pool.creating + pool.sockets.size >= this.maxConnections) {\n      return new Promise<T | null>((resolve) =>\n        pool.pending.push(resolve)\n      ).then(callback);\n    }\n\n    const socket = pool.free.values().next().value;\n    if (socket) pool.free.delete(socket);\n    return callback(socket);\n  }\n\n  pool(key: string) {\n    if (!this.pools.has(key)) this.pools.set(key, new SocketSet<T>());\n    return this.pools.get(key)!;\n  }\n\n  claim(key: string, socket: T): void {\n    socket.ref();\n\n    const pool = this.pool(key);\n    pool.sockets.add(socket);\n  }\n\n  release(key: string, socket: T): boolean {\n    socket.unref();\n\n    const pool = this.pool(key);\n\n    // Immediately reuse for pending connection.\n    if (pool.pending.length) {\n      const onReady = pool.pending.shift()!;\n      onReady(socket);\n      return false;\n    }\n\n    // Save freed connections for reuse.\n    if (pool.free.size < this.maxFreeConnections) {\n      pool.free.add(socket);\n      return false;\n    }\n\n    this.delete(key, socket);\n    return true;\n  }\n\n  get(key: string): T | undefined {\n    const pool = this.pools.get(key);\n    if (pool) return pool.sockets.values().next().value;\n  }\n\n  free(key: string) {\n    const pool = this.pools.get(key);\n    if (pool) return pool.free.values().next().value;\n  }\n\n  delete(key: string, socket: T): void {\n    const pool = this.pools.get(key);\n    if (!pool || !pool.sockets.has(socket)) return;\n\n    // Delete all references to the socket.\n    pool.free.delete(socket);\n    pool.sockets.delete(socket);\n\n    // Create a new pending socket when an old socket is removed.\n    // If a socket was removed we MUST be below `maxConnections`.\n    // We also MUST have already used our `free` connections up otherwise we\n    // wouldn't have a pending callback.\n    const onReady = pool.pending.shift();\n    if (onReady) {\n      onReady(null); // No socket to reuse here.\n      return;\n    }\n\n    // Remove pool when there are no sockets to track anymore.\n    if (!pool.creating && !pool.sockets.size) this.pools.delete(key);\n  }\n}\n\nexport class Http2ConnectionManager\n  implements ConnectionManager<ClientHttp2Session> {\n  sessions = new Map<string, ClientHttp2Session>();\n  refs = new WeakMap<ClientHttp2Session, number>();\n\n  async ready(\n    key: string,\n    onReady: (client: ClientHttp2Session | null) => ClientHttp2Session\n  ) {\n    const existingClient = this.sessions.get(key);\n    return onReady(existingClient || null);\n  }\n\n  claim(key: string, session: ClientHttp2Session) {\n    const count = this.refs.get(session) || 0;\n    if (count === 0) session.ref();\n    this.refs.set(session, count + 1);\n    this.sessions.set(key, session);\n  }\n\n  release(key: string, session: ClientHttp2Session): boolean {\n    const count = this.refs.get(session) || 0;\n    if (count === 1) session.unref();\n    this.refs.set(session, count - 1);\n\n    // Noop. To be implemented with HTTP2 throttling.\n    return false;\n  }\n\n  get(key: string) {\n    return this.sessions.get(key);\n  }\n\n  free(key: string) {\n    return this.sessions.get(key);\n  }\n\n  delete(key: string, session: ClientHttp2Session) {\n    this.refs.delete(session);\n    if (this.sessions.get(key) === session) this.sessions.delete(key);\n  }\n}\n\n// Global connection caches.\nconst globalNetConnections = new SocketConnectionManager<Socket>();\nconst globalTlsConnections = new SocketConnectionManager<TLSSocket>();\nconst globalHttp2Connections = new Http2ConnectionManager();\n\nconst defaultNetConnect = netConnect;\nconst defaultTlsConnect = tlsConnect;\nconst defaultHttp2Connect = (authority: URL, socket: Socket | TLSSocket) => {\n  return http2Connect(authority, { createConnection: () => socket });\n};\n\n/**\n * Write Servie body to node.js stream.\n */\nfunction pumpBody(\n  req: Request,\n  stream: Writable,\n  onError: (err: Error) => void\n) {\n  const body = useRawBody(req);\n\n  if (body instanceof ArrayBuffer) {\n    return stream.end(new Uint8Array(body));\n  }\n\n  if (Buffer.isBuffer(body) || typeof body === \"string\" || body === null) {\n    return stream.end(body);\n  }\n\n  return pipeline(body, stream, (err) => {\n    if (err) return onError(err);\n  });\n}\n\n/**\n * Expose connection errors.\n */\nexport class ConnectionError extends BaseError {\n  code = \"EUNAVAILABLE\";\n\n  constructor(public request: Request, message: string, cause: Error) {\n    super(message, cause);\n  }\n}\n\n/**\n * Execute HTTP request.\n */\nfunction execHttp1(\n  req: Request,\n  url: URL,\n  keepAlive: number,\n  socket: Socket | TLSSocket\n): Promise<HttpResponse> {\n  return new Promise<HttpResponse>((resolve, reject) => {\n    const encrypted = url.protocol === \"https:\";\n    const request: typeof httpRequest = encrypted ? httpsRequest : httpRequest;\n\n    const arg: RequestOptions = {\n      protocol: url.protocol,\n      hostname: url.hostname,\n      port: url.port,\n      defaultPort: encrypted ? 443 : 80, // Specify to avoid `Host` header issues.\n      method: req.method,\n      path: url.pathname + url.search,\n      headers: req.headers.asObject(),\n      auth:\n        url.username || url.password\n          ? `${url.username}:${url.password}`\n          : undefined,\n      createConnection: () => socket,\n    };\n\n    const rawRequest = request(arg);\n\n    // Handle abort events correctly.\n    const onAbort = () => {\n      req.signal.off(\"abort\", onAbort);\n      socket.emit(\"agentRemove\"); // `abort` destroys the connection with no event.\n      rawRequest.destroy();\n    };\n\n    // Reuse HTTP connections where possible.\n    if (keepAlive > 0) {\n      rawRequest.shouldKeepAlive = true;\n      rawRequest.setHeader(\"Connection\", \"keep-alive\");\n    }\n\n    // Trigger unavailable error when node.js errors before response.\n    const onRequestError = (err: Error) => {\n      req.signal.off(\"abort\", onAbort);\n      rawRequest.removeListener(\"response\", onResponse);\n\n      return reject(\n        new ConnectionError(req, `Unable to connect to ${url.host}`, err)\n      );\n    };\n\n    // Track the node.js response.\n    const onResponse = (rawResponse: IncomingMessage) => {\n      // Trailers are populated on \"end\".\n      let resolveTrailers: (headers: HeadersInit) => void;\n      const trailer = new Promise<HeadersInit>(\n        (resolve) => (resolveTrailers = resolve)\n      );\n\n      rawRequest.removeListener(\"response\", onResponse);\n      rawRequest.removeListener(\"error\", onRequestError);\n\n      const {\n        address: localAddress,\n        port: localPort,\n      } = rawRequest.connection.address() as AddressInfo;\n\n      const {\n        address: remoteAddress,\n        port: remotePort,\n      } = rawResponse.connection.address() as AddressInfo;\n\n      const responseStream = new PassThrough();\n\n      let bytesTransferred = 0;\n      const onData = (chunk: Buffer) => {\n        req.signal.emit(\"responseBytes\", (bytesTransferred += chunk.length));\n      };\n\n      // Force `end` to be triggered so the response can still be piped.\n      // Reference: https://github.com/nodejs/node/issues/27981\n      const onAborted = () => {\n        rawResponse.push(null);\n        responseStream.end();\n      };\n\n      rawResponse.on(\"data\", onData);\n      rawResponse.on(\"aborted\", onAborted);\n      req.signal.emit(\"responseStarted\");\n\n      const res = new HttpResponse(\n        pipeline(rawResponse, responseStream, (err) => {\n          req.signal.off(\"abort\", onAbort);\n          rawResponse.removeListener(\"data\", onData);\n          rawResponse.removeListener(\"aborted\", onAborted);\n\n          resolveTrailers(rawResponse.trailers);\n\n          if (err) req.signal.emit(\"error\", err);\n          req.signal.emit(\"responseEnded\");\n        }),\n        {\n          status: rawResponse.statusCode,\n          statusText: rawResponse.statusMessage,\n          url: req.url,\n          headers: rawResponse.headers,\n          omitDefaultHeaders: true,\n          trailer,\n          connection: {\n            localAddress,\n            localPort,\n            remoteAddress,\n            remotePort,\n            encrypted,\n          },\n          httpVersion: rawResponse.httpVersion,\n        }\n      );\n\n      return resolve(res);\n    };\n\n    let bytesTransferred = 0;\n    const onData = (chunk: Buffer) => {\n      req.signal.emit(\"requestBytes\", (bytesTransferred += chunk.length));\n    };\n\n    const requestStream = new PassThrough();\n\n    req.signal.on(\"abort\", onAbort);\n    rawRequest.once(\"error\", onRequestError);\n    rawRequest.once(\"response\", onResponse);\n    requestStream.on(\"data\", onData);\n    req.signal.emit(\"requestStarted\");\n\n    pipeline(requestStream, rawRequest, () => {\n      requestStream.removeListener(\"data\", onData);\n\n      req.signal.emit(\"requestEnded\");\n    });\n\n    return pumpBody(req, requestStream, reject);\n  });\n}\n\n/**\n * ALPN validation error.\n */\nexport class ALPNError extends Error {\n  code = \"EALPNPROTOCOL\";\n\n  constructor(public request: Request, message: string) {\n    super(message);\n  }\n}\n\n/**\n * Execute a HTTP2 connection.\n */\nfunction execHttp2(\n  req: Request,\n  url: URL,\n  client: ClientHttp2Session\n): Promise<Http2Response> {\n  return new Promise<Http2Response>((resolve, reject) => {\n    // HTTP2 formatted headers.\n    const headers = Object.assign(\n      {\n        [h2constants.HTTP2_HEADER_METHOD]: req.method,\n        [h2constants.HTTP2_HEADER_AUTHORITY]: url.host,\n        [h2constants.HTTP2_HEADER_SCHEME]: url.protocol.slice(0, -1),\n        [h2constants.HTTP2_HEADER_PATH]: url.pathname + url.search,\n      },\n      req.headers.asObject()\n    );\n\n    const http2Stream = client.request(headers, { endStream: false });\n\n    // Trigger unavailable error when node.js errors before response.\n    const onRequestError = (err: Error) => {\n      req.signal.off(\"abort\", onAbort);\n      http2Stream.removeListener(\"response\", onResponse);\n\n      return reject(\n        new ConnectionError(req, `Unable to connect to ${url.host}`, err)\n      );\n    };\n\n    const onResponse = (headers: IncomingHttpHeaders) => {\n      const encrypted = (client.socket as TLSSocket).encrypted === true;\n      const {\n        localAddress,\n        localPort,\n        remoteAddress = \"\",\n        remotePort = 0,\n      } = client.socket;\n\n      let resolveTrailers: (headers: HeadersInit) => void;\n      const trailer = new Promise<HeadersInit>(\n        (resolve) => (resolveTrailers = resolve)\n      );\n\n      http2Stream.removeListener(\"error\", onRequestError);\n      http2Stream.removeListener(\"response\", onResponse);\n\n      const onTrailers = (headers: IncomingHttpHeaders) => {\n        resolveTrailers(headers);\n      };\n\n      let bytesTransferred = 0;\n      const onData = (chunk: Buffer) => {\n        req.signal.emit(\"responseBytes\", (bytesTransferred += chunk.length));\n      };\n\n      http2Stream.on(\"data\", onData);\n      http2Stream.once(\"trailers\", onTrailers);\n      req.signal.emit(\"responseStarted\");\n\n      const res = new Http2Response(\n        pipeline(http2Stream, new PassThrough(), (err) => {\n          req.signal.off(\"abort\", onAbort);\n          http2Stream.removeListener(\"data\", onData);\n          http2Stream.removeListener(\"data\", onTrailers);\n\n          resolveTrailers({}); // Resolve in case \"trailers\" wasn't emitted.\n\n          if (err) req.signal.emit(\"error\", err);\n          req.signal.emit(\"responseEnded\");\n        }),\n        {\n          status: Number(headers[h2constants.HTTP2_HEADER_STATUS]),\n          statusText: \"\",\n          url: req.url,\n          httpVersion: \"2.0\",\n          headers,\n          omitDefaultHeaders: true,\n          trailer,\n          connection: {\n            localAddress,\n            localPort,\n            remoteAddress,\n            remotePort,\n            encrypted,\n          },\n        }\n      );\n\n      return resolve(res);\n    };\n\n    const onAbort = () => http2Stream.destroy();\n\n    let bytesTransferred = 0;\n    const onData = (chunk: Buffer) => {\n      req.signal.emit(\"requestBytes\", (bytesTransferred += chunk.length));\n    };\n\n    const requestStream = new PassThrough();\n\n    req.signal.on(\"abort\", onAbort);\n    http2Stream.once(\"error\", onRequestError);\n    http2Stream.once(\"response\", onResponse);\n    requestStream.on(\"data\", onData);\n\n    req.signal.emit(\"requestStarted\");\n\n    pipeline(requestStream, http2Stream, () => {\n      requestStream.removeListener(\"data\", onData);\n\n      req.signal.emit(\"requestEnded\");\n    });\n\n    return pumpBody(req, requestStream, reject);\n  });\n}\n\n/**\n * Wrap `execHttp2` with support for a connection manager instance.\n */\nfunction manageHttp2(\n  manager: ConnectionManager<ClientHttp2Session>,\n  key: string,\n  client: ClientHttp2Session,\n  req: Request,\n  url: URL\n) {\n  manager.claim(key, client);\n  return execHttp2(req, url, client).finally(() =>\n    manager.release(key, client)\n  );\n}\n\n/**\n * Configure HTTP version negotiation.\n */\nexport enum NegotiateHttpVersion {\n  HTTP1_ONLY,\n  HTTP2_FOR_HTTPS,\n  HTTP2_ONLY,\n}\n\n/**\n * Node.js HTTP request options.\n */\nexport interface TransportOptions {\n  keepAlive?: number;\n  servername?: string;\n  rejectUnauthorized?: boolean;\n  negotiateHttpVersion?: NegotiateHttpVersion;\n  ca?: string | Buffer | Array<string | Buffer>;\n  cert?: string | Buffer;\n  key?: string | Buffer;\n  secureContext?: SecureContext;\n  secureProtocol?: string;\n  secureOptions?: number;\n  tlsSockets?: ConnectionManager<TLSSocket>;\n  netSockets?: ConnectionManager<Socket>;\n  http2Sessions?: ConnectionManager<ClientHttp2Session>;\n  lookup?: (\n    hostname: string,\n    options: LookupOptions,\n    callback: (err: Error | null, address: string, family: number) => void\n  ) => void;\n  createHttp2Connection?: (\n    authority: URL,\n    socket: Socket | TLSSocket\n  ) => ClientHttp2Session | Promise<ClientHttp2Session>;\n  createNetConnection?: (options: NetConnectOpts) => Socket | Promise<Socket>;\n  createTlsConnection?: (\n    options: TlsConnectOpts\n  ) => TLSSocket | Promise<TLSSocket>;\n}\n\n/**\n * Custom abort error instance.\n */\nexport class AbortError extends Error {\n  code = \"EABORT\";\n\n  constructor(public request: Request, message: string) {\n    super(message);\n  }\n}\n\n/**\n * Forward request over HTTP1/1 or HTTP2, with TLS support.\n */\nexport function transport(options: TransportOptions = {}) {\n  const {\n    keepAlive = 5000, // Default to keeping a connection open briefly.\n    negotiateHttpVersion = NegotiateHttpVersion.HTTP2_FOR_HTTPS,\n    lookup = dnsLookup,\n    tlsSockets = globalTlsConnections,\n    netSockets = globalNetConnections,\n    http2Sessions = globalHttp2Connections,\n    createNetConnection = defaultNetConnect,\n    createTlsConnection = defaultTlsConnect,\n    createHttp2Connection = defaultHttp2Connect,\n  } = options;\n\n  return async function (\n    req: Request,\n    next: () => Promise<HttpResponse>\n  ): Promise<HttpResponse> {\n    const url = new URL(req.url, \"http://localhost\");\n    const { hostname, protocol } = url;\n\n    if (req.signal.aborted) {\n      throw new AbortError(req, \"Request has been aborted\");\n    }\n\n    if (protocol === \"http:\") {\n      const port = Number(url.port) || 80;\n      const connectionKey = `${hostname}:${port}:${negotiateHttpVersion}`;\n\n      if (negotiateHttpVersion === NegotiateHttpVersion.HTTP2_ONLY) {\n        const existingClient = http2Sessions.free(connectionKey);\n\n        if (existingClient) {\n          return manageHttp2(\n            http2Sessions,\n            connectionKey,\n            existingClient,\n            req,\n            url\n          );\n        }\n      }\n\n      const socket = await netSockets.ready(\n        connectionKey,\n        async (existingSocket) => {\n          if (existingSocket) return existingSocket;\n\n          const socket = await createNetConnection({\n            host: hostname,\n            port,\n            lookup,\n          });\n          setupSocket(netSockets, connectionKey, socket, keepAlive);\n          return socket;\n        }\n      );\n\n      // Claim net socket for usage after `ready`.\n      netSockets.claim(connectionKey, socket);\n\n      // Use existing HTTP2 session in HTTP2-only mode.\n      if (negotiateHttpVersion === NegotiateHttpVersion.HTTP2_ONLY) {\n        const client = await http2Sessions.ready(\n          connectionKey,\n          async (existingClient) => {\n            if (existingClient) return existingClient;\n\n            const client = await createHttp2Connection(url, socket);\n            setupHttp2Client(http2Sessions, connectionKey, client, keepAlive);\n            return client;\n          }\n        );\n\n        return manageHttp2(http2Sessions, connectionKey, client, req, url);\n      }\n\n      return execHttp1(req, url, keepAlive, socket);\n    }\n\n    // Optionally negotiate HTTP2 connection.\n    if (protocol === \"https:\") {\n      const {\n        ca,\n        cert,\n        key,\n        secureProtocol,\n        secureContext,\n        secureOptions,\n      } = options;\n      const port = Number(url.port) || 443;\n      const servername =\n        options.servername ||\n        calculateServerName(hostname, req.headers.get(\"host\"));\n      const rejectUnauthorized = options.rejectUnauthorized !== false;\n      const connectionKey = `${hostname}:${port}:${negotiateHttpVersion}:${servername}:${rejectUnauthorized}:${\n        ca || \"\"\n      }:${cert || \"\"}:${key || \"\"}:${secureProtocol || \"\"}`;\n\n      // Use an existing HTTP2 session before making a new attempt.\n      if (\n        negotiateHttpVersion === NegotiateHttpVersion.HTTP2_ONLY ||\n        negotiateHttpVersion === NegotiateHttpVersion.HTTP2_FOR_HTTPS\n      ) {\n        const existingSession = http2Sessions.free(connectionKey);\n\n        if (existingSession) {\n          return manageHttp2(\n            http2Sessions,\n            connectionKey,\n            existingSession,\n            req,\n            url\n          );\n        }\n      }\n\n      // Use an existing TLS session to speed up handshake.\n      const existingSocket = tlsSockets.get(connectionKey);\n      const session = existingSocket ? existingSocket.getSession() : undefined;\n      const ALPNProtocols =\n        negotiateHttpVersion === NegotiateHttpVersion.HTTP2_ONLY\n          ? [\"h2\"]\n          : negotiateHttpVersion === NegotiateHttpVersion.HTTP2_FOR_HTTPS\n          ? [\"h2\", \"http/1.1\"]\n          : undefined;\n\n      const socketOptions: TlsConnectOpts = {\n        host: hostname,\n        port,\n        servername,\n        rejectUnauthorized,\n        ca,\n        cert,\n        key,\n        session,\n        secureProtocol,\n        secureContext,\n        ALPNProtocols,\n        lookup,\n        secureOptions,\n      };\n\n      const socket = await tlsSockets.ready(\n        connectionKey,\n        async (existingSocket) => {\n          if (existingSocket) return existingSocket;\n\n          const socket = await createTlsConnection(socketOptions);\n          setupSocket(tlsSockets, connectionKey, socket, keepAlive);\n          return socket;\n        }\n      );\n\n      // Claim TLS socket after `ready`.\n      tlsSockets.claim(connectionKey, socket);\n\n      if (negotiateHttpVersion === NegotiateHttpVersion.HTTP1_ONLY) {\n        return execHttp1(req, url, keepAlive, socket);\n      }\n\n      if (negotiateHttpVersion === NegotiateHttpVersion.HTTP2_ONLY) {\n        const client = await http2Sessions.ready(\n          connectionKey,\n          async (existingClient) => {\n            if (existingClient) return existingClient;\n\n            const client = await createHttp2Connection(url, socket);\n            setupHttp2Client(http2Sessions, connectionKey, client, keepAlive);\n            return client;\n          }\n        );\n\n        return manageHttp2(http2Sessions, connectionKey, client, req, url);\n      }\n\n      return new Promise<HttpResponse | Http2Response>((resolve, reject) => {\n        const onClose = () => {\n          socket.removeListener(\"error\", onError);\n          socket.removeListener(\"connect\", onConnect);\n\n          return reject(new ALPNError(req, \"TLS connection closed early\"));\n        };\n\n        const onError = (err: Error) => {\n          socket.removeListener(\"connect\", onConnect);\n          socket.removeListener(\"close\", onClose);\n\n          return reject(\n            new ConnectionError(\n              req,\n              `Unable to connect to ${hostname}:${port}`,\n              err\n            )\n          );\n        };\n\n        // Execute HTTP connection according to negotiated ALPN protocol.\n        const onConnect = () => {\n          socket.removeListener(\"error\", onError);\n          socket.removeListener(\"close\", onClose);\n\n          // Workaround for https://github.com/nodejs/node/pull/32958/files#r418695485.\n          (socket as any).secureConnecting = false;\n\n          // Successfully negotiated HTTP2 connection.\n          if (socket.alpnProtocol === \"h2\") {\n            return resolve(\n              http2Sessions\n                .ready(connectionKey, async (existingClient) => {\n                  if (existingClient) {\n                    tlsSockets.release(connectionKey, socket);\n                    return existingClient;\n                  }\n\n                  const client = await createHttp2Connection(url, socket);\n                  setupHttp2Client(\n                    http2Sessions,\n                    connectionKey,\n                    client,\n                    keepAlive\n                  );\n                  return client;\n                })\n                .then((client) => {\n                  return manageHttp2(\n                    http2Sessions,\n                    connectionKey,\n                    client,\n                    req,\n                    url\n                  );\n                })\n            );\n          }\n\n          if (socket.alpnProtocol === \"http/1.1\" || !socket.alpnProtocol) {\n            return resolve(execHttp1(req, url, keepAlive, socket));\n          }\n\n          return reject(\n            new ALPNError(\n              req,\n              `Unknown ALPN protocol negotiated: ${socket.alpnProtocol}`\n            )\n          );\n        };\n\n        // Existing socket may already have negotiated ALPN protocol.\n        if ((socket as any).alpnProtocol != null) return onConnect();\n\n        socket.once(\"secureConnect\", onConnect);\n        socket.once(\"error\", onError);\n        socket.once(\"close\", onClose);\n      });\n    }\n\n    return next();\n  };\n}\n\n/**\n * Setup the socket with the connection manager.\n *\n * Ref: https://github.com/nodejs/node/blob/531b4bedcac14044f09129ffb65dab71cc2707d9/lib/_http_agent.js#L254\n */\nfunction setupSocket<T extends Socket | TLSSocket>(\n  manager: ConnectionManager<T>,\n  key: string,\n  socket: T,\n  keepAlive: number\n) {\n  const onFree = () => {\n    if (keepAlive > 0) socket.setKeepAlive(true, keepAlive);\n    const destroy = manager.release(key, socket);\n    if (destroy) socket.destroy();\n  };\n\n  const cleanup = () => {\n    socket.removeListener(\"free\", onFree);\n    socket.removeListener(\"close\", cleanup);\n    socket.removeListener(\"agentRemove\", cleanup);\n    manager.delete(key, socket);\n  };\n\n  socket.on(\"free\", onFree);\n  socket.on(\"close\", cleanup);\n  socket.on(\"agentRemove\", cleanup);\n}\n\n/**\n * Set up a HTTP2 working session.\n */\nfunction setupHttp2Client(\n  manager: ConnectionManager<ClientHttp2Session>,\n  key: string,\n  client: ClientHttp2Session,\n  keepAlive: number\n) {\n  client.once(\"error\", () => manager.delete(key, client));\n  client.once(\"goaway\", () => manager.delete(key, client));\n  client.once(\"close\", () => manager.delete(key, client));\n  client.setTimeout(keepAlive, () => client.close());\n}\n\n/**\n * Ref: https://github.com/nodejs/node/blob/5823938d156f4eb6dc718746afbf58f1150f70fb/lib/_http_agent.js#L231\n */\nfunction calculateServerName(hostname: string, hostHeader: string | null) {\n  if (!hostHeader) return hostname;\n  if (hostHeader.charAt(0) === \"[\") {\n    const index = hostHeader.indexOf(\"]\");\n    if (index === -1) return hostHeader;\n    return hostHeader.substr(1, index - 1);\n  }\n  return hostHeader.split(\":\", 1)[0];\n}\n"]}