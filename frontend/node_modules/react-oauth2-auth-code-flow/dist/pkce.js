"use strict";

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.replace");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCodeVerifier = exports.generateCodeChallenge = exports.sha256 = exports.base64URLEncode = void 0;

var _crypto = _interopRequireDefault(require("crypto"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Helper functions for PKCE (Proof Key of Code Exchange) Extension for OAuth2
// see https://tools.ietf.org/html/rfc7636#section-4
var base64URLEncode = function base64URLEncode(str) {
  return str.toString("base64").replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
};

exports.base64URLEncode = base64URLEncode;

var sha256 = function sha256(buffer) {
  return _crypto["default"].createHash("sha256").update(buffer).digest();
};

exports.sha256 = sha256;

var generateCodeChallenge = function generateCodeChallenge() {
  // generate a code verifier for PKCE extension of Auth Code Flow
  // see https://auth0.com/docs/api-auth/tutorials/authorization-code-grant-pkce
  var code_verifier = base64URLEncode(_crypto["default"].randomBytes(32)); // store the code_verifier as we'll need it later on when exchanging the auth code for a token

  localStorage.setItem("code_verifier", code_verifier); // generate code challenge to be sent with authorization request

  return base64URLEncode(sha256(code_verifier));
};

exports.generateCodeChallenge = generateCodeChallenge;

var getCodeVerifier = function getCodeVerifier() {
  // obtain the stored code verifier (stored by generateCodeChallenge)
  var code_verifier = localStorage.getItem("code_verifier");

  if (code_verifier === null) {
    throw new Error("No Code Verifier found");
  }

  return code_verifier;
};

exports.getCodeVerifier = getCodeVerifier;